// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	wallets "aprian1337/thukul-service/business/wallets"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, domain
func (_m *Repository) Create(ctx context.Context, domain wallets.Domain) error {
	ret := _m.Called(ctx, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, wallets.Domain) error); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *Repository) GetByUserId(ctx context.Context, userId int) (wallets.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 wallets.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) wallets.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(wallets.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByUserId provides a mock function with given fields: ctx, domain
func (_m *Repository) UpdateByUserId(ctx context.Context, domain wallets.Domain) (wallets.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 wallets.Domain
	if rf, ok := ret.Get(0).(func(context.Context, wallets.Domain) wallets.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(wallets.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, wallets.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
