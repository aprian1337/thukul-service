// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	activities "aprian1337/thukul-service/business/activities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ActivitiesCreate provides a mock function with given fields: ctx, domain, pocketId
func (_m *Repository) ActivitiesCreate(ctx context.Context, domain activities.Domain, pocketId int) (activities.Domain, error) {
	ret := _m.Called(ctx, domain, pocketId)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, activities.Domain, int) activities.Domain); ok {
		r0 = rf(ctx, domain, pocketId)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, activities.Domain, int) error); ok {
		r1 = rf(ctx, domain, pocketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivitiesDelete provides a mock function with given fields: ctx, id, pocketId
func (_m *Repository) ActivitiesDelete(ctx context.Context, id int, pocketId int) (int64, error) {
	ret := _m.Called(ctx, id, pocketId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int64); ok {
		r0 = rf(ctx, id, pocketId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, pocketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivitiesGetAll provides a mock function with given fields: ctx, pocketId
func (_m *Repository) ActivitiesGetAll(ctx context.Context, pocketId int) ([]activities.Domain, error) {
	ret := _m.Called(ctx, pocketId)

	var r0 []activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []activities.Domain); ok {
		r0 = rf(ctx, pocketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]activities.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, pocketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivitiesGetById provides a mock function with given fields: ctx, pocketId, id
func (_m *Repository) ActivitiesGetById(ctx context.Context, pocketId int, id int) (activities.Domain, error) {
	ret := _m.Called(ctx, pocketId, id)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) activities.Domain); ok {
		r0 = rf(ctx, pocketId, id)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, pocketId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivitiesGetTotal provides a mock function with given fields: ctx, userId, pocketId, kind
func (_m *Repository) ActivitiesGetTotal(ctx context.Context, userId int, pocketId int, kind string) (int64, error) {
	ret := _m.Called(ctx, userId, pocketId, kind)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) int64); ok {
		r0 = rf(ctx, userId, pocketId, kind)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, userId, pocketId, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivitiesUpdate provides a mock function with given fields: ctx, domain, pocketId, id
func (_m *Repository) ActivitiesUpdate(ctx context.Context, domain activities.Domain, pocketId int, id int) (activities.Domain, error) {
	ret := _m.Called(ctx, domain, pocketId, id)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, activities.Domain, int, int) activities.Domain); ok {
		r0 = rf(ctx, domain, pocketId, id)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, activities.Domain, int, int) error); ok {
		r1 = rf(ctx, domain, pocketId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
