// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	wishlists "aprian1337/thukul-service/business/wishlists"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// WishlistsCreate provides a mock function with given fields: ctx, domain, userId
func (_m *Repository) WishlistsCreate(ctx context.Context, domain wishlists.Domain, userId int) (wishlists.Domain, error) {
	ret := _m.Called(ctx, domain, userId)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, wishlists.Domain, int) wishlists.Domain); ok {
		r0 = rf(ctx, domain, userId)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, wishlists.Domain, int) error); ok {
		r1 = rf(ctx, domain, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WishlistsDelete provides a mock function with given fields: ctx, userId, wishlistId
func (_m *Repository) WishlistsDelete(ctx context.Context, userId int, wishlistId int) (int64, error) {
	ret := _m.Called(ctx, userId, wishlistId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int64); ok {
		r0 = rf(ctx, userId, wishlistId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, wishlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WishlistsGetById provides a mock function with given fields: ctx, userId, wishlistId
func (_m *Repository) WishlistsGetById(ctx context.Context, userId int, wishlistId int) (wishlists.Domain, error) {
	ret := _m.Called(ctx, userId, wishlistId)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) wishlists.Domain); ok {
		r0 = rf(ctx, userId, wishlistId)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, wishlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WishlistsGetList provides a mock function with given fields: ctx, userId
func (_m *Repository) WishlistsGetList(ctx context.Context, userId int) ([]wishlists.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 []wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []wishlists.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wishlists.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WishlistsUpdate provides a mock function with given fields: ctx, domain, userId, wishlistId
func (_m *Repository) WishlistsUpdate(ctx context.Context, domain wishlists.Domain, userId int, wishlistId int) (wishlists.Domain, error) {
	ret := _m.Called(ctx, domain, userId, wishlistId)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, wishlists.Domain, int, int) wishlists.Domain); ok {
		r0 = rf(ctx, domain, userId, wishlistId)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, wishlists.Domain, int, int) error); ok {
		r1 = rf(ctx, domain, userId, wishlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
