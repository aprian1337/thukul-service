// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	cryptos "aprian1337/thukul-service/business/cryptos"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CryptosCreate provides a mock function with given fields: ctx, domain
func (_m *Repository) CryptosCreate(ctx context.Context, domain cryptos.Domain) (cryptos.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 cryptos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, cryptos.Domain) cryptos.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(cryptos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cryptos.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CryptosGetByUser provides a mock function with given fields: ctx, userId
func (_m *Repository) CryptosGetByUser(ctx context.Context, userId int) ([]cryptos.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 []cryptos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []cryptos.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cryptos.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CryptosGetDetail provides a mock function with given fields: ctx, userId, coinId
func (_m *Repository) CryptosGetDetail(ctx context.Context, userId int, coinId int) (cryptos.Domain, error) {
	ret := _m.Called(ctx, userId, coinId)

	var r0 cryptos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) cryptos.Domain); ok {
		r0 = rf(ctx, userId, coinId)
	} else {
		r0 = ret.Get(0).(cryptos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, coinId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CryptosUpdate provides a mock function with given fields: ctx, domain
func (_m *Repository) CryptosUpdate(ctx context.Context, domain cryptos.Domain) (cryptos.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 cryptos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, cryptos.Domain) cryptos.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(cryptos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cryptos.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
