// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	favorites "aprian1337/thukul-service/business/favorites"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FavoritesCheck provides a mock function with given fields: ctx, userId, coinId
func (_m *Repository) FavoritesCheck(ctx context.Context, userId int, coinId int) (int64, error) {
	ret := _m.Called(ctx, userId, coinId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int64); ok {
		r0 = rf(ctx, userId, coinId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, coinId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoritesCreate provides a mock function with given fields: ctx, domain
func (_m *Repository) FavoritesCreate(ctx context.Context, domain favorites.Domain) (favorites.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 favorites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, favorites.Domain) favorites.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(favorites.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, favorites.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoritesDelete provides a mock function with given fields: ctx, userId, favoriteId
func (_m *Repository) FavoritesDelete(ctx context.Context, userId int, favoriteId int) (int64, error) {
	ret := _m.Called(ctx, userId, favoriteId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int64); ok {
		r0 = rf(ctx, userId, favoriteId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, favoriteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoritesGetById provides a mock function with given fields: ctx, userId, favoriteId
func (_m *Repository) FavoritesGetById(ctx context.Context, userId int, favoriteId int) (favorites.Domain, error) {
	ret := _m.Called(ctx, userId, favoriteId)

	var r0 favorites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) favorites.Domain); ok {
		r0 = rf(ctx, userId, favoriteId)
	} else {
		r0 = ret.Get(0).(favorites.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, favoriteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoritesGetList provides a mock function with given fields: ctx, userId
func (_m *Repository) FavoritesGetList(ctx context.Context, userId int) ([]favorites.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 []favorites.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []favorites.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]favorites.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
