// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	salaries "aprian1337/thukul-service/business/salaries"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// SalariesCreate provides a mock function with given fields: ctx, domain
func (_m *Repository) SalariesCreate(ctx context.Context, domain salaries.Domain) (salaries.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 salaries.Domain
	if rf, ok := ret.Get(0).(func(context.Context, salaries.Domain) salaries.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(salaries.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, salaries.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalariesDelete provides a mock function with given fields: ctx, id
func (_m *Repository) SalariesDelete(ctx context.Context, id uint) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalariesGetById provides a mock function with given fields: ctx, id
func (_m *Repository) SalariesGetById(ctx context.Context, id uint) (salaries.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 salaries.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) salaries.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(salaries.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalariesGetList provides a mock function with given fields: ctx
func (_m *Repository) SalariesGetList(ctx context.Context) ([]salaries.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []salaries.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []salaries.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]salaries.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalariesUpdate provides a mock function with given fields: ctx, domain
func (_m *Repository) SalariesUpdate(ctx context.Context, domain salaries.Domain) (salaries.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 salaries.Domain
	if rf, ok := ret.Get(0).(func(context.Context, salaries.Domain) salaries.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(salaries.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, salaries.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
